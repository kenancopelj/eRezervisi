// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eRezervisi.Infrastructure.Database;

#nullable disable

namespace eRezervisi.Infrastructure.Database.Migrations
{
    [DbContext(typeof(eRezervisiDbContext))]
    [Migration("20241005185843_RemovedShortTitle")]
    partial class RemovedShortTitle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eRezervisi.Core.Domain.Authorization.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            Name = "MobileUser"
                        });
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.AccommodationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccommodationUnitCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accommodation_unit_category_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("DeactivateAt")
                        .HasColumnType("date")
                        .HasColumnName("deactivate_at");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double>("TapPosition")
                        .HasColumnType("float")
                        .HasColumnName("tap_position");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("thumbnail_image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<long>("TownshipId")
                        .HasColumnType("bigint")
                        .HasColumnName("township_id");

                    b.HasKey("Id")
                        .HasName("pk_accommodation_units");

                    b.HasIndex("AccommodationUnitCategoryId")
                        .HasDatabaseName("ix_accommodation_units_accommodation_unit_category_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_accommodation_units_owner_id");

                    b.HasIndex("TownshipId")
                        .HasDatabaseName("ix_accommodation_units_township_id");

                    b.ToTable("accommodation_units", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.AccommodationUnitCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("short_title");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_accommodation_unit_categories");

                    b.ToTable("accommodation_unit_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            ShortTitle = "APT",
                            Title = "Apartmani"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            ShortTitle = "VIL",
                            Title = "Ville"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            ShortTitle = "VIK",
                            Title = "Vikendice"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            ShortTitle = "PRI",
                            Title = "Privatne kuće"
                        });
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.AccommodationUnitReview", b =>
                {
                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<long>("AccommodationUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("accommodation_unit_id");

                    b.HasKey("ReviewId", "AccommodationUnitId")
                        .HasName("pk_accommodation_unit_reviews");

                    b.HasIndex("AccommodationUnitId")
                        .HasDatabaseName("ix_accommodation_unit_reviews_accommodation_unit_id");

                    b.ToTable("accommodation_unit_reviews", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Canton", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("short_title");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_cantons");

                    b.ToTable("cantons", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.FavoriteAccommodationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccommodationUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("accommodation_unit_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_favorite_accommodation_units");

                    b.HasIndex("AccommodationUnitId")
                        .HasDatabaseName("ix_favorite_accommodation_units_accommodation_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_favorite_accommodation_units_user_id");

                    b.ToTable("favorite_accommodation_units", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.GuestReview", b =>
                {
                    b.Property<long>("GuestId")
                        .HasColumnType("bigint")
                        .HasColumnName("guest_id");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("GuestId", "ReviewId")
                        .HasName("pk_guest_reviews");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("ix_guest_reviews_review_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_guest_reviews_user_id");

                    b.ToTable("guest_reviews", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccommodationUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("accommodation_unit_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("AccommodationUnitId")
                        .HasDatabaseName("ix_images_accommodation_unit_id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_messages_receiver_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_messages_sender_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccommodationUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("accommodation_unit_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("short_title");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type")
                        .HasDefaultValueSql("3");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccommodationUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("accommodation_unit_id");

                    b.Property<DateTime?>("CheckedInAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checked_in_at");

                    b.Property<DateTime?>("CheckedOutAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checked_out_at");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2")
                        .HasColumnName("from");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int")
                        .HasColumnName("number_of_adults");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int")
                        .HasColumnName("number_of_children");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("payment_method");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2")
                        .HasColumnName("to");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("AccommodationUnitId")
                        .HasDatabaseName("ix_reservations_accommodation_unit_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_reservations_code");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reservations_user_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Township", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CantonId")
                        .HasColumnType("bigint")
                        .HasColumnName("canton_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("post_code");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_townships");

                    b.HasIndex("CantonId")
                        .HasDatabaseName("ix_townships_canton_id");

                    b.HasIndex("PostCode")
                        .HasDatabaseName("ix_townships_post_code");

                    b.ToTable("townships", (string)null);
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("phone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "0000",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            Email = "kenan.copelj@edu.fit.ba",
                            FirstName = "Owner",
                            IsActive = true,
                            LastName = "User",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            Phone = "0000",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Address = "0000",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0L,
                            Deleted = false,
                            Email = "kenan.copelj@edu.fit.ba",
                            FirstName = "Regular",
                            IsActive = true,
                            LastName = "User",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0L,
                            Phone = "0000",
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.AccommodationUnit", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.AccommodationUnitCategory", "AccommodationUnitCategory")
                        .WithMany()
                        .HasForeignKey("AccommodationUnitCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accommodation_units_accommodation_unit_categories_accommodation_unit_category_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accommodation_units_users_owner_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.Township", "Township")
                        .WithMany()
                        .HasForeignKey("TownshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accommodation_units_townships_township_id");

                    b.OwnsOne("eRezervisi.Core.Domain.Entities.AccommodationUnitPolicy", "AccommodationUnitPolicy", b1 =>
                        {
                            b1.Property<long>("AccommodationUnitId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<bool>("AlcoholAllowed")
                                .HasColumnType("bit")
                                .HasColumnName("alcohol_allowed");

                            b1.Property<bool>("BirthdayPartiesAllowed")
                                .HasColumnType("bit")
                                .HasColumnName("birthday_parties_allowed");

                            b1.Property<int>("Capacity")
                                .HasColumnType("int")
                                .HasColumnName("capacity");

                            b1.Property<bool>("HasPool")
                                .HasColumnType("bit")
                                .HasColumnName("has_pool");

                            b1.Property<bool>("OneNightOnly")
                                .HasColumnType("bit")
                                .HasColumnName("one_night_only");

                            b1.HasKey("AccommodationUnitId")
                                .HasName("pk_accommodation_unit_policies");

                            b1.ToTable("accommodation_unit_policies", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AccommodationUnitId")
                                .HasConstraintName("fk_accommodation_unit_policies_accommodation_units_id");
                        });

                    b.Navigation("AccommodationUnitCategory");

                    b.Navigation("AccommodationUnitPolicy")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Township");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.AccommodationUnitReview", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.AccommodationUnit", "AccommodationUnit")
                        .WithMany("Reviews")
                        .HasForeignKey("AccommodationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accommodation_unit_reviews_accommodation_units_accommodation_unit_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accommodation_unit_reviews_reviews_review_id");

                    b.Navigation("AccommodationUnit");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.FavoriteAccommodationUnit", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.AccommodationUnit", "AccommodationUnit")
                        .WithMany()
                        .HasForeignKey("AccommodationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favorite_accommodation_units_accommodation_units_accommodation_unit_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.User", null)
                        .WithMany("FavoriteAccommodationUnits")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_favorite_accommodation_units_users_user_id");

                    b.Navigation("AccommodationUnit");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.GuestReview", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.User", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guest_reviews_users_guest_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guest_reviews_reviews_review_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.User", null)
                        .WithMany("GuestReviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_guest_reviews_users_user_id");

                    b.Navigation("Guest");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Image", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.AccommodationUnit", "AccommodationUnit")
                        .WithMany("Images")
                        .HasForeignKey("AccommodationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_accommodation_units_accommodation_unit_id");

                    b.Navigation("AccommodationUnit");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Message", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_receiver_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_sender_id");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Notification", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.AccommodationUnit", "AccommodationUnit")
                        .WithMany()
                        .HasForeignKey("AccommodationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_accommodation_units_accommodation_unit_id");

                    b.HasOne("eRezervisi.Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_users_user_id");

                    b.Navigation("AccommodationUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.Township", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Entities.Canton", "Canton")
                        .WithMany()
                        .HasForeignKey("CantonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_townships_cantons_canton_id");

                    b.Navigation("Canton");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("eRezervisi.Core.Domain.Authorization.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.OwnsOne("eRezervisi.Core.Domain.Entities.UserCredentials", "UserCredentials", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<DateTime>("LastPasswordChangeAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("last_password_change_at");

                            b1.Property<string>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("password_hash");

                            b1.Property<string>("PasswordSalt")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("password_salt");

                            b1.Property<string>("RefreshToken")
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("refresh_token");

                            b1.Property<DateTime?>("RefreshTokenExpiresAtUtc")
                                .HasColumnType("datetime2")
                                .HasColumnName("refresh_token_expires_at_utc");

                            b1.Property<bool>("ReminderSent")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("reminder_sent");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("username");

                            b1.HasKey("UserId")
                                .HasName("pk_user_credentials");

                            b1.HasIndex("RefreshToken")
                                .IsUnique()
                                .HasDatabaseName("ix_user_credentials_refresh_token")
                                .HasFilter("[refresh_token] IS NOT NULL");

                            b1.HasIndex("Username")
                                .IsUnique()
                                .HasDatabaseName("ix_user_credentials_username");

                            b1.ToTable("user_credentials", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_credentials_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    LastPasswordChangeAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    PasswordHash = "22b46813685cbb9ce130ee451b78c820222740d47150a04a925778474898a90a",
                                    PasswordSalt = "d87fb28197dc4c88a790d5c31ff4d355",
                                    ReminderSent = false,
                                    Username = "desktop"
                                },
                                new
                                {
                                    UserId = 2L,
                                    LastPasswordChangeAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    PasswordHash = "22b46813685cbb9ce130ee451b78c820222740d47150a04a925778474898a90a",
                                    PasswordSalt = "d87fb28197dc4c88a790d5c31ff4d355",
                                    ReminderSent = false,
                                    Username = "mobile"
                                });
                        });

                    b.OwnsOne("eRezervisi.Core.Domain.Entities.UserSettings", "UserSettings", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<bool>("ReceiveEmails")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true)
                                .HasColumnName("receive_emails");

                            b1.Property<bool>("ReceiveNotifications")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true)
                                .HasColumnName("receive_notifications");

                            b1.HasKey("UserId")
                                .HasName("pk_user_settings");

                            b1.ToTable("user_settings", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_settings_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    ReceiveEmails = true,
                                    ReceiveNotifications = true
                                },
                                new
                                {
                                    UserId = 2L,
                                    ReceiveEmails = true,
                                    ReceiveNotifications = true
                                });
                        });

                    b.Navigation("Role");

                    b.Navigation("UserCredentials");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.AccommodationUnit", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("eRezervisi.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("FavoriteAccommodationUnits");

                    b.Navigation("GuestReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
